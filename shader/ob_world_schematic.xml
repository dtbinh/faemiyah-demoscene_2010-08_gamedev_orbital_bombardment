<?xml version="1.0" encoding="utf-8"?>
<shader xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <attribute>
    <type>vec2</type>
    <name>texcoord</name>
  </attribute>
  <attribute>
    <type>vec3</type>
    <name>vertex</name>
  </attribute>
  <uniform>
    <type>sampler3D</type>
    <name>decal</name>
  </uniform>
  <uniform>
    <type>vec2</type>
    <name>decal_scale</name>
  </uniform>
  <uniform>
    <type>vec3</type>
    <name>light_ambient</name>
  </uniform>
  <uniform>
    <type>vec3</type>
    <name>light_diffuse</name>
  </uniform>
  <uniform>
    <type>vec3</type>
    <name>light_dir</name>
  </uniform>
  <uniform>
    <type>mat4</type>
    <name>modelview</name>
  </uniform>
  <uniform>
    <type>sampler2D</type>
    <name>normalmap</name>
  </uniform>
  <uniform>
    <type>vec3</type>
    <name>schematic_height</name>
  </uniform>
  <uniform>
    <type>vec3</type>
    <name>schematic_neutral</name>
  </uniform>
  <uniform>
    <type>vec3</type>
    <name>schematic_pop_0</name>
  </uniform>
  <uniform>
    <type>vec3</type>
    <name>schematic_pop_1</name>
  </uniform>
  <uniform>
    <type>mat4</type>
    <name>transform</name>
  </uniform>
  <uniform>
    <type>sampler2D</type>
    <name>tex0</name>
  </uniform>
  <vertexprogram>
    varying vec3 rver;
    void main()
    {
      rver = vertex.xyz;
      gl_Position = transform * vec4(rver, 1.0);
      gl_TexCoord[0].st = texcoord;
    }
  </vertexprogram>
  <fragmentprogram>
    varying vec3 rver;
    void main()
    {
      float ht = texture2D(tex0, gl_TexCoord[0].st).r;
      vec4 nn = vec4(texture2D(normalmap, gl_TexCoord[0].st).xyz * 2.0 - 1.0, 0.0);
      float lightmul = clamp(dot(normalize((modelview * nn).xyz), light_dir), 0.0, 1.0);
      vec3 cc = mix(schematic_neutral, schematic_height, ht) * (light_ambient + light_diffuse * lightmul);

      vec2 dstr = texture3D(decal, (rver * decal_scale.y) + 0.5).ra;
      if(dstr.x &lt; 0.5)
      {
        cc = mix(cc * schematic_neutral, schematic_pop_0, dstr.x * 2.0);
      }
      else
      {
        cc = mix(schematic_pop_0, schematic_pop_1, (dstr.x - 0.5) * 2.0);
      }

      gl_FragColor = vec4((light_ambient + light_diffuse * lightmul) * cc, 1.0); 
    }
  </fragmentprogram>
</shader>
